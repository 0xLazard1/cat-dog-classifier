#!/usr/bin/env python3
"""
Convertit le mod√®le PyTorch entra√Æn√© pour l'API - Version corrig√©e
"""

import torch
import pickle
import os
from datetime import datetime
from CNN_Model import CatDogCNN
from model_wrapper import PyTorchModelWrapper
import numpy as np

def convert_model_for_api():
    print("üîÑ CONVERSION MOD√àLE POUR API (VERSION CORRIG√âE)")
    print("=" * 50)
    
    # 1. V√©rifier que le mod√®le PyTorch existe
    if not os.path.exists('./best_cnn_model_pytorch.pth'):
        print("‚ùå Fichier best_cnn_model_pytorch.pth manquant!")
        print("‚ö†Ô∏è Avez-vous bien termin√© l'entra√Ænement ?")
        return False
    
    print("‚úÖ Mod√®le PyTorch trouv√©")
    
    # 2. Charger le mod√®le PyTorch
    try:
        checkpoint = torch.load('./best_cnn_model_pytorch.pth', map_location='cpu')
        print(f"üìä Epoch: {checkpoint.get('epoch', 'Unknown')}")
        val_acc = checkpoint.get('val_acc', 0)
        print(f"üìà Val Accuracy: {val_acc:.2f}%")
        
        # Cr√©er le mod√®le et charger les poids
        model = CatDogCNN(num_classes=1)
        model.load_state_dict(checkpoint['model_state_dict'])
        model.eval()  # Mode √©valuation
        
        print("‚úÖ Mod√®le PyTorch charg√© et en mode √©valuation")
        
    except Exception as e:
        print(f"‚ùå Erreur chargement mod√®le PyTorch: {e}")
        return False
    
    # 3. Cr√©er le wrapper avec la classe externe
    device = 'mps' if torch.backends.mps.is_available() else 'cpu'
    wrapper = PyTorchModelWrapper(model, device=device)
    
    # 4. Test rapide du wrapper
    print(f"\nüß™ Test rapide du wrapper (device: {device}):")
    try:
        # Test avec image al√©atoire
        test_image = np.random.random((1, 224, 224, 3)).astype(np.float32)
        pred = wrapper.predict_proba(test_image)
        print(f"‚úÖ Test r√©ussi - Pr√©diction: {pred.flatten()[0]:.4f}")
        
        # Test avec image diff√©rente
        test_image2 = np.random.random((1, 224, 224, 3)).astype(np.float32)
        pred2 = wrapper.predict_proba(test_image2)
        print(f"‚úÖ Test 2 r√©ussi - Pr√©diction: {pred2.flatten()[0]:.4f}")
        
        # V√©rifier que les pr√©dictions sont diff√©rentes
        diff = abs(pred.flatten()[0] - pred2.flatten()[0])
        if diff > 0.001:
            print(f"‚úÖ Les pr√©dictions varient (diff: {diff:.4f}) - Mod√®le fonctionne!")
        else:
            print(f"‚ö†Ô∏è Pr√©dictions tr√®s similaires (diff: {diff:.4f})")
            
    except Exception as e:
        print(f"‚ùå Erreur test wrapper: {e}")
        return False
    
    # 5. Sauvegarder pour l'API
    api_model_data = {
        'model': wrapper,
        'input_shape': (224, 224, 3),
        'num_classes': 1,
        'model_type': 'CNN_PyTorch',
        'device': device,
        'saved_at': datetime.now().isoformat(),
        'val_accuracy': val_acc,
        'epoch': checkpoint.get('epoch', 'Unknown')
    }
    
    try:
        with open('./best_cnn_model.pkl', 'wb') as f:
            pickle.dump(api_model_data, f)
        
        file_size = os.path.getsize('./best_cnn_model.pkl') / (1024*1024)
        print(f"\n‚úÖ Mod√®le API sauvegard√©: best_cnn_model.pkl ({file_size:.1f} MB)")
        
        # Afficher les stats du mod√®le
        print(f"üìä Statistiques du mod√®le:")
        print(f"   ‚Ä¢ Accuracy validation: {val_acc:.2f}%")
        print(f"   ‚Ä¢ Device: {device}")
        print(f"   ‚Ä¢ Epoch d'arr√™t: {checkpoint.get('epoch', 'Unknown')}")
        
        if val_acc < 70:
            print("‚ö†Ô∏è ATTENTION: Accuracy < 70% - Le mod√®le pourrait √™tre sous-entra√Æn√©")
        elif val_acc > 95:
            print("‚ö†Ô∏è ATTENTION: Accuracy > 95% - Possible overfitting")
        else:
            print("‚úÖ Accuracy dans la plage normale (70-95%)")
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde API: {e}")
        return False
    
    print("\nüéâ CONVERSION TERMIN√âE!")
    print("‚ñ∂Ô∏è Vous pouvez maintenant relancer l'API:")
    print("   python api.py")
    print("\nüìù Le mod√®le devrait maintenant donner des pr√©dictions variables!")
    
    return True

if __name__ == "__main__":
    success = convert_model_for_api()
    if success:
        print("\n‚úÖ SUCC√àS - Mod√®le pr√™t pour l'API")
    else:
        print("\n‚ùå √âCHEC - V√©rifiez les erreurs ci-dessus")